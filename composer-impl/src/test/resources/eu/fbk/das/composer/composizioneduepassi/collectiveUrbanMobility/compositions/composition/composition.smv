-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, UMS_PlanTrip_TripPlanner, UMS_PlanTrip_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, UMS_PlanTrip_ReceiveAlternatives
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 UMS_PlanTrip
VAR UMS_PlanTrip: {ST2, ST1, ST0};
ASSIGN
next(UMS_PlanTrip) :=
case
(UMS_PlanTrip = ST1 & input = UMS_PlanTrip_RESET): ST0;
(UMS_PlanTrip = ST1 & output = UMS_PlanTrip_ReceiveAlternatives): ST2;
(UMS_PlanTrip = ST0 & input = UMS_PlanTrip_TripPlanner): ST1;
(UMS_PlanTrip = ST2 & input = UMS_PlanTrip_RESET): ST0;
1:UMS_PlanTrip;
esac;
TRANS ( input = UMS_PlanTrip_TripPlanner) -> (UMS_PlanTrip = ST0)
TRANS ( input = UMS_PlanTrip_RESET) -> (UMS_PlanTrip = ST2 | UMS_PlanTrip = ST1)
TRANS ( output = UMS_PlanTrip_ReceiveAlternatives) -> (UMS_PlanTrip = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 TripPlanner
VAR TripPlanner: {TRC, RINIT, RL};
ASSIGN
next(TripPlanner) :=
case
(TripPlanner = RINIT & input = UMS_PlanTrip_TripPlanner): RL;
(TripPlanner = RL & output = UMS_PlanTrip_ReceiveAlternatives): TRC;
1:TripPlanner;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = UMS_PlanTrip_TripPlanner) -> ((((TripPlanner = RINIT))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((TripPlanner in {TRC}));
--	 Synchronicity enforcement
TRANS (UMS_PlanTrip in {ST1}) -> (next(UMS_PlanTrip) != UMS_PlanTrip)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((TripPlanner = RINIT))
INIT ((UMS_PlanTrip = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)